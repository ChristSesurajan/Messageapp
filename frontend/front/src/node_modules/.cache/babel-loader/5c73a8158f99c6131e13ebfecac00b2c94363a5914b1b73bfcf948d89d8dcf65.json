{"ast":null,"code":"var _jsxFileName = \"D:\\\\visualcode\\\\myapp\\\\frontend\\\\front\\\\src\\\\api\\\\messageap.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport API_ENDPOINT from './../api/index.js';\nimport { UserContext } from './../context/UserContext';\nimport { useNavigate } from 'react-router-dom';\nimport { rid } from './searchus.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Message() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [error, setError] = useState('');\n  let [senderId, setSenderId] = useState(); // Initialize as null\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const {\n    username\n  } = useContext(UserContext);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (username) {\n      fetchUserId();\n    }\n  }, [username]);\n  useEffect(() => {\n    if (senderId && rid) {\n      fetchMessages();\n    }\n  }, [senderId, rid]);\n  const fetchMessages = async () => {\n    try {\n      console.log(senderId);\n      console.log(rid);\n      const response = await fetch(`${API_ENDPOINT}/messages?sender_id=${senderId}&recipient_id=${rid}`);\n      const data = await response.json();\n      console.log(data);\n      setMessages(data.messages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setError(error.message);\n    }\n  };\n  const fetchUserId = async () => {\n    try {\n      const response = await fetch(`${API_ENDPOINT}/messages?username=${username}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user ID');\n      }\n      const data = await response.json();\n      console.log('Fetched User ID:', data.user.id);\n      setSenderId(data.user.id);\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n      setError(error.message);\n    }\n  };\n  const sendMessage = async () => {\n    console.log(senderId);\n    if (!senderId || !newMessage) {\n      setError('Sender ID and message are required');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_ENDPOINT}/messages`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sender_id: senderId,\n          recipient_id: rid,\n          message: newMessage\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n      setNewMessage('');\n      fetchMessages();\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messaging-app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Messaging App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        className: \"message-input\",\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [...messages].reverse().map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `message ${message.sender_id === senderId ? 'sent' : 'received'}`,\n          children: message.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Message, \"NlsuUF3fpR+nHmT1F69N1typVHY=\", false, function () {\n  return [useNavigate];\n});\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","useContext","useState","useEffect","API_ENDPOINT","UserContext","useNavigate","rid","jsxDEV","_jsxDEV","Message","_s","messages","setMessages","newMessage","setNewMessage","error","setError","senderId","setSenderId","selectedUserId","setSelectedUserId","username","navigate","fetchUserId","fetchMessages","console","log","response","fetch","data","json","message","ok","Error","user","id","sendMessage","method","headers","body","JSON","stringify","sender_id","recipient_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","reverse","map","index","_c","$RefreshReg$"],"sources":["D:/visualcode/myapp/frontend/front/src/api/messageap.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport API_ENDPOINT from './../api/index.js';\r\nimport { UserContext } from './../context/UserContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { rid } from './searchus.js';\r\n\r\nfunction Message() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n  let [senderId, setSenderId] = useState(); // Initialize as null\r\n  const [selectedUserId, setSelectedUserId] = useState(0);\r\n  const { username } = useContext(UserContext);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (username) {\r\n      fetchUserId();\r\n    }\r\n  }, [username]);\r\n  \r\n  useEffect(() => {\r\n    if (senderId && rid) {\r\n      fetchMessages();\r\n    }\r\n  }, [senderId, rid]);\r\n  \r\n  const fetchMessages = async () => {\r\n    try {\r\n      console.log(senderId);\r\n      console.log(rid);\r\n      const response = await fetch(`${API_ENDPOINT}/messages?sender_id=${senderId}&recipient_id=${rid}`);\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setMessages(data.messages);\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n  const fetchUserId = async () => {\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}/messages?username=${username}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user ID');\r\n      }\r\n      const data = await response.json();\r\n      console.log('Fetched User ID:', data.user.id);\r\n      setSenderId(data.user.id);\r\n    } catch (error) {\r\n      console.error('Error fetching user ID:', error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const sendMessage = async () => {\r\n      console.log(senderId)\r\n    if (!senderId || !newMessage) {\r\n      setError('Sender ID and message are required');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}/messages`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sender_id: senderId, recipient_id: rid, message: newMessage }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send message');\r\n      }\r\n      setNewMessage('');\r\n      fetchMessages();\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"messaging-app-container\">\r\n      <h1 className=\"app-title\">Messaging App</h1>\r\n      {error && <div className=\"error\">{error}</div>}\r\n      <div className=\"message-input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          className=\"message-input\"\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button onClick={sendMessage} className=\"send-button\">\r\n          Send\r\n        </button>\r\n      </div>\r\n      <div className=\"message-list\">\r\n        <ul>\r\n          {[...messages].reverse().map((message, index) => (\r\n            <li\r\n              key={index}\r\n              className={`message ${message.sender_id === senderId ? 'sent' : 'received'}`}\r\n            >\r\n              {message.message}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}